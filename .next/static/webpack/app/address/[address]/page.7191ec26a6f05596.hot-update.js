"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/address/[address]/page",{

/***/ "(app-pages-browser)/./src/utils/api.ts":
/*!**************************!*\
  !*** ./src/utils/api.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAddressCounters: () => (/* binding */ getAddressCounters),\n/* harmony export */   getAddressInfo: () => (/* binding */ getAddressInfo),\n/* harmony export */   getAddressTokenBalances: () => (/* binding */ getAddressTokenBalances),\n/* harmony export */   getAddressTransactions: () => (/* binding */ getAddressTransactions),\n/* harmony export */   getBlockInfo: () => (/* binding */ getBlockInfo),\n/* harmony export */   getBlockTransactions: () => (/* binding */ getBlockTransactions),\n/* harmony export */   getIndexingStatus: () => (/* binding */ getIndexingStatus),\n/* harmony export */   getMainPageBlocks: () => (/* binding */ getMainPageBlocks),\n/* harmony export */   getMainPageTransactions: () => (/* binding */ getMainPageTransactions),\n/* harmony export */   getSmartContractInfo: () => (/* binding */ getSmartContractInfo),\n/* harmony export */   getStats: () => (/* binding */ getStats),\n/* harmony export */   getTokenHolders: () => (/* binding */ getTokenHolders),\n/* harmony export */   getTokenInfo: () => (/* binding */ getTokenInfo),\n/* harmony export */   getTransactionInfo: () => (/* binding */ getTransactionInfo),\n/* harmony export */   getTransactionLogs: () => (/* binding */ getTransactionLogs),\n/* harmony export */   getTransactionSummary: () => (/* binding */ getTransactionSummary),\n/* harmony export */   getTransactionTokenTransfers: () => (/* binding */ getTransactionTokenTransfers),\n/* harmony export */   searchByQuery: () => (/* binding */ searchByQuery)\n/* harmony export */ });\nconst API_BASE_URL = 'https://hyperscan.gas.zip/';\n// Generic fetch function with error handling\nasync function fetchFromApi(endpoint) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const queryParams = new URLSearchParams(params).toString();\n    const url = \"\".concat(API_BASE_URL).concat(endpoint).concat(queryParams ? \"?\".concat(queryParams) : '');\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"API request failed: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('API fetch error:', error);\n        throw error;\n    }\n}\n// Main page data\nconst getMainPageBlocks = ()=>{\n    return fetchFromApi('/api/v2/main-page/blocks');\n};\nconst getMainPageTransactions = ()=>{\n    return fetchFromApi('/api/v2/main-page/transactions');\n};\nconst getIndexingStatus = ()=>{\n    return fetchFromApi('/api/v2/main-page/indexing-status');\n};\nconst getStats = ()=>{\n    return fetchFromApi('/api/v2/stats');\n};\n// Transaction details\nconst getTransactionInfo = (hash)=>{\n    return fetchFromApi(\"/api/v2/transactions/\".concat(hash));\n};\nconst getTransactionTokenTransfers = (hash)=>{\n    return fetchFromApi(\"/api/v2/transactions/\".concat(hash, \"/token-transfers\"));\n};\nconst getTransactionLogs = (hash)=>{\n    return fetchFromApi(\"/api/v2/transactions/\".concat(hash, \"/logs\"));\n};\nconst getTransactionSummary = (hash)=>{\n    return fetchFromApi(\"/api/v2/transactions/\".concat(hash, \"/summary\"));\n};\n// Block details\nconst getBlockInfo = (numberOrHash)=>{\n    return fetchFromApi(\"/api/v2/blocks/\".concat(numberOrHash));\n};\nconst getBlockTransactions = function(numberOrHash) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    // Always ensure we're requesting only 10 items\n    const finalParams = {\n        ...params,\n        limit: '10'\n    };\n    return fetchFromApi(\"/api/v2/blocks/\".concat(numberOrHash, \"/transactions\"), finalParams);\n};\n// Address details\nconst getAddressInfo = (address)=>{\n    return fetchFromApi(\"/api/v2/addresses/\".concat(address));\n};\nconst getAddressTransactions = function(address) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    // Always ensure we're requesting only 10 items\n    const finalParams = {\n        ...params,\n        limit: '10'\n    };\n    return fetchFromApi(\"/api/v2/addresses/\".concat(address, \"/transactions\"), finalParams);\n};\nconst getAddressTokenBalances = (address)=>{\n    return fetchFromApi(\"/api/v2/addresses/\".concat(address, \"/token-balances\"));\n};\nconst getAddressCounters = (address)=>{\n    return fetchFromApi(\"/api/v2/addresses/\".concat(address, \"/counters\"));\n};\n// Token related endpoints\nconst getTokenInfo = (tokenAddress)=>{\n    return fetchFromApi(\"/api/v2/tokens/\".concat(tokenAddress));\n};\nconst getTokenHolders = function(tokenAddress) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    // Always ensure we're requesting only 10 items\n    const finalParams = {\n        ...params,\n        limit: '10'\n    };\n    return fetchFromApi(\"/api/v2/tokens/\".concat(tokenAddress, \"/holders\"), finalParams);\n};\n// Smart contract related endpoints\nconst getSmartContractInfo = (address)=>{\n    return fetchFromApi(\"/api/v2/smart-contracts/\".concat(address));\n};\n// Search functionality\nconst searchByQuery = (query)=>{\n    return fetchFromApi(\"/api/v2/search?q=\".concat(encodeURIComponent(query)));\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/api.ts\n"));

/***/ })

});